basePath: /api/v1
definitions:
  controller.RefreshToken.request:
    properties:
      refresh_token:
        type: string
    type: object
  models.CreateUser:
    properties:
      email:
        maxLength: 150
        type: string
      firstName:
        maxLength: 50
        type: string
      identifier:
        maxLength: 100
        type: string
      lastName:
        maxLength: 50
        type: string
      password:
        maxLength: 50
        minLength: 8
        type: string
      phoneNumber:
        type: string
    required:
    - email
    - firstName
    - identifier
    - lastName
    - password
    - phoneNumber
    type: object
  models.ErrorResponse:
    properties:
      errors: {}
      msg:
        type: string
    type: object
  models.User:
    properties:
      createdAt:
        type: string
      email:
        type: string
      firstName:
        type: string
      id:
        type: string
      identifier:
        type: string
      isAdmin:
        type: boolean
      lastName:
        type: string
      phoneNumber:
        type: string
      updatedAt:
        type: string
    type: object
  models.UserLogin:
    properties:
      identifier:
        maxLength: 100
        type: string
      password:
        maxLength: 50
        minLength: 8
        type: string
    required:
    - identifier
    - password
    type: object
  models.UserTokens:
    properties:
      access_Token:
        type: string
      refresh_Token:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: tringuyen2762001@gmail.com
    name: Nguyen Tri
  description: greendeco
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  title: Fiber Go API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Use for login response the refresh_token and access_Token
      parameters:
      - description: Login
        in: body
        name: todo
        required: true
        schema:
          $ref: '#/definitions/models.UserLogin'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserTokens'
        "400":
          description: Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: User Login
      tags:
      - Auth
  /auth/refresh-token:
    post:
      description: Create a new access token.
      parameters:
      - description: refresh_token
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controller.RefreshToken.request'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserTokens'
        "400":
          description: Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: create a new access token
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      parameters:
      - description: New User
        in: body
        name: todo
        required: true
        schema:
          $ref: '#/definitions/models.CreateUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Create new user
      tags:
      - Auth
  /user/me:
    get:
      consumes:
      - application/json
      description: route get user Id from token then get user information
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: get user information by Id
      tags:
      - User
securityDefinitions:
  Bearer:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
