basePath: /api/v1
definitions:
  controller.ForgotPassword.userEmailReq:
    properties:
      email:
        maxLength: 150
        type: string
    required:
    - email
    type: object
  controller.UpdatePassword.userPassword:
    properties:
      password:
        maxLength: 50
        minLength: 8
        type: string
    required:
    - password
    type: object
  models.BasePaginationResponse:
    properties:
      items: {}
      next:
        type: boolean
      page:
        type: integer
      page_size:
        type: integer
      prev:
        type: boolean
    type: object
  models.CreateCategory:
    properties:
      name:
        maxLength: 100
        type: string
    required:
    - name
    type: object
  models.CreateProduct:
    properties:
      category_id:
        type: string
      description:
        type: string
      detail:
        type: string
      difficulty:
        type: string
      images:
        items:
          type: string
        type: array
      light:
        maxLength: 50
        type: string
      name:
        type: string
      size:
        maxLength: 10
        type: string
      type:
        maxLength: 20
        type: string
      warter:
        maxLength: 20
        type: string
    required:
    - category_id
    - detail
    - difficulty
    - images
    - light
    - name
    - size
    - type
    - warter
    type: object
  models.CreateUser:
    properties:
      email:
        maxLength: 150
        type: string
      firstName:
        maxLength: 50
        type: string
      identifier:
        maxLength: 100
        type: string
      lastName:
        maxLength: 50
        type: string
      password:
        maxLength: 50
        minLength: 8
        type: string
      phoneNumber:
        type: string
    required:
    - email
    - firstName
    - identifier
    - lastName
    - password
    - phoneNumber
    type: object
  models.CreateVariant:
    properties:
      available:
        type: boolean
      color:
        maxLength: 50
        minLength: 3
        type: string
      currency:
        type: string
      description:
        type: string
      image:
        type: string
      is_default:
        type: boolean
      name:
        maxLength: 50
        minLength: 3
        type: string
      price:
        type: integer
      product_id:
        type: string
    required:
    - color
    - currency
    - image
    - name
    - price
    - product_id
    type: object
  models.ErrorResponse:
    properties:
      errors: {}
      msg:
        type: string
    type: object
  models.ProductQueryField:
    properties:
      available:
        type: boolean
      category_id:
        type: string
      difficulty:
        type: string
      name:
        type: string
      size:
        type: string
      type:
        type: string
      warter:
        type: string
    type: object
  models.UpdateCategory:
    properties:
      name:
        maxLength: 100
        type: string
    required:
    - name
    type: object
  models.UpdateProduct:
    properties:
      available:
        type: boolean
      description:
        type: string
      detail:
        type: string
      difficulty:
        type: string
      images:
        items:
          type: string
        type: array
      is_publish:
        type: boolean
      light:
        maxLength: 50
        type: string
      size:
        maxLength: 10
        type: string
      type:
        maxLength: 20
        type: string
      warter:
        maxLength: 20
        type: string
    required:
    - detail
    - difficulty
    - images
    - is_publish
    - light
    - size
    - type
    - warter
    type: object
  models.UpdateUser:
    properties:
      avatar:
        type: string
      email:
        maxLength: 150
        type: string
      firstName:
        maxLength: 50
        type: string
      lastName:
        maxLength: 50
        type: string
      phoneNumber:
        type: string
    required:
    - email
    - firstName
    - lastName
    - phoneNumber
    type: object
  models.User:
    properties:
      avatar:
        type: string
      email:
        type: string
      firstName:
        type: string
      id:
        type: string
      identifier:
        type: string
      lastName:
        type: string
      phoneNumber:
        type: string
    type: object
  models.UserLogin:
    properties:
      identifier:
        maxLength: 100
        type: string
      password:
        maxLength: 50
        minLength: 8
        type: string
    required:
    - identifier
    - password
    type: object
  models.UserToken:
    properties:
      access_Token:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: tringuyen2762001@gmail.com
    name: Nguyen Tri
  description: greendeco
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  title: Fiber Go API
  version: "1.0"
paths:
  /admin/cusotmers:
    get:
      consumes:
      - application/json
      description: route get customer for admin
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "400":
          description: Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: get customers
      tags:
      - Admin
  /auth/forgot-password:
    post:
      consumes:
      - application/json
      description: send email to user for reset password
      parameters:
      - description: user email
        in: body
        name: todo
        required: true
        schema:
          $ref: '#/definitions/controller.ForgotPassword.userEmailReq'
      responses:
        "200":
          description: OK
      summary: option when user forgot password
      tags:
      - Auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Use for login response the access_Token
      parameters:
      - description: Login
        in: body
        name: todo
        required: true
        schema:
          $ref: '#/definitions/models.UserLogin'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserToken'
        "400":
          description: Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: User Login
      tags:
      - Auth
  /auth/password:
    put:
      consumes:
      - application/json
      description: Update Password
      parameters:
      - description: Updated Password
        in: body
        name: todo
        required: true
        schema:
          $ref: '#/definitions/controller.UpdatePassword.userPassword'
      responses:
        "204":
          description: No Content
      security:
      - Bearer: []
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      parameters:
      - description: New User
        in: body
        name: todo
        required: true
        schema:
          $ref: '#/definitions/models.CreateUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Create new user
      tags:
      - Auth
  /category/:
    get:
      consumes:
      - application/json
      parameters:
      - description: 'default: limit = 10'
        in: query
        name: limit
        type: integer
      - description: 'default: offset = 1'
        in: query
        name: offset
        type: integer
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.BasePaginationResponse'
            type: array
        "400":
          description: Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: get category
      tags:
      - Category
    post:
      consumes:
      - application/json
      parameters:
      - description: New category
        in: body
        name: todo
        required: true
        schema:
          $ref: '#/definitions/models.CreateCategory'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Create new category require admin permission
      tags:
      - Category
  /category/{id}/delete:
    delete:
      consumes:
      - application/json
      parameters:
      - description: id category update
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: delete category by id require admin permission
      tags:
      - Category
  /category/{id}/update:
    post:
      consumes:
      - application/json
      parameters:
      - description: id category update
        in: path
        name: id
        required: true
        type: string
      - description: category
        in: body
        name: todo
        required: true
        schema:
          $ref: '#/definitions/models.UpdateCategory'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: update category by id require admin permission
      tags:
      - Category
  /media/upload:
    post:
      consumes:
      - multipart/form-data
      operationId: image
      parameters:
      - description: upfile
        in: formData
        name: image
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - ApiKeyAuth: []
      summary: Create new image return image
      tags:
      - Media
  /product/:
    get:
      consumes:
      - application/json
      description: |-
        "field" not working on swagger you can read models.ProductQueryField for fields query
        sort value can only asc or desc
      parameters:
      - in: query
        name: limit
        type: integer
      - in: query
        name: offSet
        type: integer
      - in: query
        name: sort
        type: string
      - in: query
        name: sortBy
        type: string
      - description: fields query is json
        example: field={"name":"hello"}
        in: query
        name: fields
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: query get products
      tags:
      - Product
    post:
      consumes:
      - application/json
      parameters:
      - description: New product
        in: body
        name: todo
        required: true
        schema:
          $ref: '#/definitions/models.CreateProduct'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Create new product require admin permission
      tags:
      - Product
  /product/{id}/delete:
    delete:
      consumes:
      - application/json
      parameters:
      - description: id product
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: delete product by id require admin permission
      tags:
      - Product
  /product/{id}/update:
    post:
      consumes:
      - application/json
      parameters:
      - description: id product update
        in: path
        name: id
        required: true
        type: string
      - description: product
        in: body
        name: todo
        required: true
        schema:
          $ref: '#/definitions/models.UpdateProduct'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: update product require admin permission
      tags:
      - Product
  /user/me:
    get:
      consumes:
      - application/json
      description: route get user Id from token then get user information
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: get user information by Id
      tags:
      - User
  /user/update:
    put:
      consumes:
      - application/json
      description: update user information
      parameters:
      - description: Updated UserInformation
        in: body
        name: todo
        required: true
        schema:
          $ref: '#/definitions/models.UpdateUser'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      security:
      - Bearer: []
      tags:
      - User
  /variant/:
    post:
      consumes:
      - application/json
      parameters:
      - description: New variant
        in: body
        name: todo
        required: true
        schema:
          $ref: '#/definitions/models.CreateVariant'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Create new variant require admin permission
      tags:
      - Variant
securityDefinitions:
  Bearer:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
